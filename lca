import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.Stack;

public class ShortestPathGraphToSpanningTree {
    private static int[][] lca;
    private static int currIn = 0;

    public static void main(String[] args) {
        HashMap<Integer, ArrayList<Integer>> neighbors = importGraph();
        int nodeCount = neighbors.size();
        lca = new int[2][nodeCount];

        lowestCommonAncestor(0, createSpanningTreeFromGraph(neighbors, false), new boolean[nodeCount]);
        HashMap<Integer, ArrayList<Integer>> directionalSpanningTree = createSpanningTreeFromGraph(neighbors, true);
        Scanner scannner = new Scanner(System.in);
        int queryCount = scannner.nextInt();
        for (int i = 0; i < queryCount; i++) {
            int start = scannner.nextInt();
            int destination = scannner.nextInt();
            if (start == destination) {
                System.out.println(new ArrayList<Integer>().add(start));
                continue;
            }

            ArrayList<Integer> pathPart1 = findPathToCommonSubtreeRoot(start, destination, directionalSpanningTree);
            ArrayList<Integer> pathPart2 = findPathToCommonSubtreeRoot(destination, start, directionalSpanningTree);
            pathPart2.remove(pathPart2.size() - 1);
            for (int j = pathPart2.size() - 1; j >= 0; j--) {
                pathPart1.add(pathPart2.get(j));
            }
            System.out.println(pathPart1);
        }
    }

    private static HashMap<Integer, ArrayList<Integer>> createSpanningTreeFromGraph(HashMap<Integer, ArrayList<Integer>> graph, boolean directional) {
        boolean[] connected = new boolean[graph.size()];
        connected[0] = true;
        HashMap<Integer, ArrayList<Integer>> spanningTree = new HashMap<Integer, ArrayList<Integer>>();
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(0);
        int toAdd = graph.size() - 1;

        while (!stack.isEmpty()) {
            int currNode = stack.pop();
            ArrayList<Integer> currNeighbors = graph.get(currNode);
            for (int i = 0; i < currNeighbors.size(); i++) {
                if (connected[currNeighbors.get(i)]) {
                    continue;
                }
                stack.push(currNeighbors.get(i));
                if (spanningTree.get(currNeighbors.get(i)) == null) {
                    spanningTree.put(currNeighbors.get(i), new ArrayList<Integer>());
                }
                spanningTree.get(currNeighbors.get(i)).add(currNode);

                if (!directional) {
                    if (spanningTree.get(currNode) == null) {
                        spanningTree.put(currNode, new ArrayList<Integer>());
                    }
                    spanningTree.get(currNode).add(currNeighbors.get(i));
                }
                connected[currNeighbors.get(i)] = true;
            }
        }
        if (directional) {
            spanningTree.put(0, new ArrayList<Integer>());
        }
        return spanningTree;
    }

    private static void lowestCommonAncestor(int node, HashMap<Integer, ArrayList<Integer>> neighbors, boolean[] visited) {
        if (visited[node]) {
            return;
        }
        visited[node] = true;
        ArrayList<Integer> currNeighbors = neighbors.get(node);
        lca[0][node] = currIn;
        currIn++;

        for (int i = 0; i < currNeighbors.size(); i++) {
            lowestCommonAncestor(currNeighbors.get(i), neighbors, visited);
        }
        lca[1][node] = currIn;
        currIn++;
    }

    private static ArrayList<Integer> findPathToCommonSubtreeRoot(int currNode, int nodeDestination,
                                                                  HashMap<Integer, ArrayList<Integer>> directionalSpanningTree) {
        ArrayList<Integer> path = new ArrayList<>();
        path.add(currNode);
        while (!((lca[0][currNode] < lca[0][nodeDestination] && lca[1][currNode] > lca[1][nodeDestination]) ||
                currNode == nodeDestination)) {
            currNode = directionalSpanningTree.get(currNode).get(0);
            path.add(currNode);
        }
        return path;
    }


    private static HashMap<Integer, ArrayList<Integer>> importGraph() {
        Scanner s = new Scanner(System.in);
        HashMap<Integer, ArrayList<Integer>> neighbors = new HashMap<Integer, ArrayList<Integer>>();

        int n = s.nextInt();
        int m = s.nextInt();

        for (int i = 0; i < m; i++) {
            int a = s.nextInt();
            int b = s.nextInt();

            if (neighbors.get(a) == null) {
                neighbors.put(a, new ArrayList<Integer>());
            }
            if (neighbors.get(b) == null) {
                neighbors.put(b, new ArrayList<Integer>());
            }
            neighbors.get(a).add(b);
            neighbors.get(b).add(a);
        }
        return neighbors;
    }
}
